"""
Aplicaci√≥n FastAPI para el Analista de Datos AI de Inseguridad Alimentaria.

Esta aplicaci√≥n utiliza SmolAgents para crear un agente inteligente que:
- Analiza preguntas en lenguaje natural
- Escribe consultas SQL din√°micamente  
- Realiza an√°lisis estad√≠sticos
- Se autocorrige si hay errores
- Genera respuestas estructuradas en Markdown
"""

import os
from typing import Dict, Any, Optional
from contextlib import asynccontextmanager

from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import HTMLResponse, FileResponse
from fastapi.staticfiles import StaticFiles
from pydantic import BaseModel
import uvicorn

from core.smolagent import food_security_agent
from core.settings import get_settings, print_settings_summary
from core.session_manager import session_manager

# Obtener configuraci√≥n
settings = get_settings()


@asynccontextmanager
async def lifespan(app: FastAPI):
    """
    Maneja el ciclo de vida de la aplicaci√≥n.
    """
    # Startup
    print("üöÄ Iniciando aplicaci√≥n SmolAgents...")
    if food_security_agent:
        status = food_security_agent.test_connection()
        if status["database"] and status["agent"]:
            print("‚úÖ Agente SmolAgents inicializado y listo")
        else:
            print("‚ö†Ô∏è Agente con problemas:", status["errors"])
    else:
        print("‚ùå Error: Agente no inicializado")
    
    yield
    
    # Shutdown
    print("üîÑ Cerrando aplicaci√≥n...")


# Crear aplicaci√≥n FastAPI usando configuraci√≥n
app = FastAPI(
    title=settings.app_name,
    description=settings.app_description,
    version=settings.app_version,
    debug=settings.server.debug,
    lifespan=lifespan
)

# Configurar CORS usando configuraci√≥n
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.server.cors_origins,
    allow_credentials=settings.server.cors_allow_credentials,
    allow_methods=settings.server.cors_allow_methods,
    allow_headers=settings.server.cors_allow_headers,
)

# Montar archivos est√°ticos
app.mount("/static", StaticFiles(directory=settings.server.static_directory), name="static")


# Modelos Pydantic
class QuestionRequest(BaseModel):
    question: str
    
    class Config:
        json_schema_extra = {
            "example": {
                "question": "¬øQu√© departamentos tienen mayor inseguridad alimentaria grave en 2022?"
            }
        }


class AnalysisResponse(BaseModel):
    question: str
    analysis: str
    agent_used: str
    success: bool
    
    class Config:
        json_schema_extra = {
            "example": {
                "question": "¬øQu√© departamentos tienen mayor inseguridad alimentaria grave en 2022?",
                "analysis": "# An√°lisis de Inseguridad Alimentaria\n\n## Departamentos con Mayor Inseguridad...",
                "agent_used": "SmolAgent CodeAgent",
                "success": True
            }
        }


class ConversationRequest(BaseModel):
    question: str
    session_id: Optional[str] = None
    
    class Config:
        json_schema_extra = {
            "example": {
                "question": "¬øY qu√© pasa con Antioquia espec√≠ficamente?",
                "session_id": "abc123-def456-ghi789"
            }
        }


class ConversationResponse(BaseModel):
    question: str
    analysis: str
    session_id: str
    message_id: str
    agent_used: str
    success: bool
    conversation_summary: Dict[str, Any]
    
    class Config:
        json_schema_extra = {
            "example": {
                "question": "¬øY qu√© pasa con Antioquia espec√≠ficamente?",
                "analysis": "# An√°lisis de Antioquia...",
                "session_id": "abc123-def456-ghi789",
                "message_id": "msg_001",
                "agent_used": "SmolAgent with Context",
                "success": True,
                "conversation_summary": {
                    "message_count": 4,
                    "session_created": "2024-01-01T10:00:00",
                    "last_activity": "2024-01-01T10:05:00"
                }
            }
        }


class SessionResponse(BaseModel):
    session_id: str
    created_at: str
    message: str
    
    class Config:
        json_schema_extra = {
            "example": {
                "session_id": "abc123-def456-ghi789",
                "created_at": "2024-01-01T10:00:00.000Z",
                "message": "Nueva sesi√≥n de conversaci√≥n creada"
            }
        }


# ===== ENDPOINTS PRINCIPALES =====

@app.get("/", response_class=FileResponse)
async def home():
    """Servir el frontend principal."""
    return FileResponse(f'{settings.server.static_directory}/index.html')

@app.get("/chat", response_class=FileResponse)
async def chat():
    """Servir la interfaz de chat."""
    return FileResponse(f'{settings.server.static_directory}/chat.html')

@app.get("/api-info", response_class=HTMLResponse)
async def api_info():
    """P√°gina de informaci√≥n sobre la API SmolAgents (versi√≥n anterior)."""
    api_key_status = "‚úÖ Configurada" if (
        settings.api.gemini_api_key and 
        settings.api.gemini_api_key != "TU_API_KEY_DE_GEMINI_AQUI"
    ) else "‚ùå No configurada"
    
    agent_status = "‚úÖ Activo" if food_security_agent else "‚ùå Error"
    
    web_search_status = "‚úÖ Disponible" if (
        food_security_agent and 
        hasattr(food_security_agent, 'web_search_tool') and 
        food_security_agent.web_search_tool
    ) else "‚ùå No disponible"
    
    html_content = f"""
    <!DOCTYPE html>
    <html>
    <head>
        <title>Analista AI - Informaci√≥n de la API</title>
        <meta charset="utf-8">
        <style>
            body {{ font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; 
                   margin: 40px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
                   color: white; min-height: 100vh; }}
            .container {{ max-width: 900px; margin: 0 auto; background: rgba(255,255,255,0.1); 
                        padding: 40px; border-radius: 20px; backdrop-filter: blur(10px);
                        box-shadow: 0 8px 32px rgba(0,0,0,0.2); }}
            h1 {{ color: #fff; border-bottom: 3px solid #4CAF50; padding-bottom: 15px;
                 text-shadow: 2px 2px 4px rgba(0,0,0,0.3); }}
            h2 {{ color: #E8F5E8; margin-top: 30px; }}
            .status {{ padding: 15px; border-radius: 10px; margin: 20px 0; font-weight: bold; }}
            .success {{ background: rgba(76, 175, 80, 0.3); border: 2px solid #4CAF50; }}
            .warning {{ background: rgba(255, 193, 7, 0.3); border: 2px solid #FFC107; }}
            .error {{ background: rgba(244, 67, 54, 0.3); border: 2px solid #F44336; }}
            .endpoint {{ background: rgba(255,255,255,0.1); padding: 20px; margin: 15px 0; 
                       border-radius: 10px; border-left: 5px solid #4CAF50; }}
            code {{ background: rgba(0,0,0,0.3); padding: 4px 8px; border-radius: 6px; 
                   font-family: 'Courier New', monospace; }}
            .feature {{ background: rgba(255,255,255,0.05); padding: 15px; margin: 10px 0;
                       border-radius: 8px; border-left: 3px solid #2196F3; }}
            a {{ color: #4CAF50; text-decoration: none; font-weight: bold; }}
            a:hover {{ color: #81C784; }}
            .grid {{ display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin: 20px 0; }}
            @media (max-width: 768px) {{ .grid {{ grid-template-columns: 1fr; }} }}
            .home-link {{ display: inline-block; margin-bottom: 20px; padding: 10px 20px;
                         background: #4CAF50; color: white; text-decoration: none;
                         border-radius: 8px; transition: all 0.3s; }}
            .home-link:hover {{ background: #45a049; transform: translateY(-2px); }}
        </style>
    </head>
    <body>
        <div class="container">
            <a href="/" class="home-link">üè† Volver al Frontend Principal</a>
            
            <h1>ü§ñ Analista de Datos AI</h1>
            <h2>Informaci√≥n de la API - Powered by SmolAgents + Gemini</h2>
            
            <div class="status {'success' if food_security_agent else 'error'}">
                üöÄ <strong>SmolAgent:</strong> {agent_status}
            </div>
            
            <div class="status {'success' if api_key_status.startswith('‚úÖ') else 'warning'}">
                üîë <strong>API Gemini:</strong> {api_key_status}
            </div>
            
            <div class="status {'success' if web_search_status.startswith('‚úÖ') else 'warning'}">
                üîç <strong>B√∫squeda Web:</strong> {web_search_status}
            </div>
            
            <h2>üîç Endpoint Principal</h2>
            <div class="endpoint">
                <strong>POST /analyze</strong><br>
                Realiza an√°lisis inteligente usando SmolAgent con autocorrecci√≥n
                
                <div style="margin-top: 15px; background: rgba(0,0,0,0.2); padding: 15px; border-radius: 8px;">
                    <strong>Ejemplo:</strong><br>
                    <code>
                    POST /analyze<br>
                    {{"question": "¬øQu√© departamentos tienen mayor inseguridad alimentaria en 2022?"}}
                    </code>
                </div>
            </div>
            
            <div class="grid">
                <div>
                    <h2>‚ú® Caracter√≠sticas SmolAgents</h2>
                    <div class="feature">
                        <strong>üîÑ Autocorrecci√≥n</strong><br>
                        Si una consulta SQL falla, el agente la corrige autom√°ticamente
                    </div>
                    <div class="feature">
                        <strong>üìä SQL Din√°mico</strong><br>
                        Escribe consultas SQL seg√∫n la pregunta espec√≠fica
                    </div>
                    <div class="feature">
                        <strong>üìà An√°lisis Estad√≠stico</strong><br>
                        Integraci√≥n con pandas/numpy para an√°lisis avanzados
                    </div>
                    <div class="feature">
                        <strong>üîç B√∫squeda Web</strong><br>
                        Complementa an√°lisis con informaci√≥n actualizada de internet
                    </div>
                </div>
                
                <div>
                    <h2>üåê Otros Endpoints</h2>
                    <ul style="list-style: none; padding: 0;">
                        <li style="margin: 10px 0;">üìã <code>GET /schema</code> - Esquema de base de datos</li>
                        <li style="margin: 10px 0;">‚ù§Ô∏è <code>GET /health</code> - Estado del sistema</li>
                        <li style="margin: 10px 0;">üìä <code>GET /status</code> - Estado detallado del agente</li>
                        <li style="margin: 10px 0;">üìñ <code>GET /docs</code> - Documentaci√≥n Swagger</li>
                    </ul>
                </div>
            </div>
            
            <h2>üí° Ejemplos de Preguntas</h2>
            <div class="grid">
                <div>
                    <div class="feature">
                        "¬øCu√°l es la situaci√≥n de inseguridad alimentaria en Colombia?"
                    </div>
                    <div class="feature">
                        "¬øQu√© departamentos tienen mayor inseguridad alimentaria grave en 2022?"
                    </div>
                </div>
                <div>
                    <div class="feature">
                        "Compara la evoluci√≥n entre Antioquia y Cundinamarca"
                    </div>
                    <div class="feature">
                        "Muestra estad√≠sticas descriptivas de inseguridad moderada en 2023"
                    </div>
                </div>
            </div>
            
            <h2>üìö Documentaci√≥n</h2>
            <p>
                <a href="/docs" target="_blank">üìñ Swagger UI</a> - 
                <a href="/redoc" target="_blank">üìë ReDoc</a> -
                <a href="/" target="_blank">üè† Frontend Principal</a>
            </p>
            
            <hr style="border: 1px solid rgba(255,255,255,0.2); margin: 30px 0;">
            <p style="text-align: center; color: rgba(255,255,255,0.7); font-size: 14px;">
                Powered by FastAPI + SmolAgents + LiteLLM + Gemini AI<br>
                Datos de inseguridad alimentaria de Colombia (2022-2024)
            </p>
        </div>
    </body>
    </html>
    """
    return html_content


@app.post("/analyze", response_model=AnalysisResponse)
async def analyze_question(request: QuestionRequest):
    """
    Analiza una pregunta usando el agente SmolAgents.
    
    El agente:
    1. Interpreta la pregunta en lenguaje natural
    2. Escribe c√≥digo Python con consultas SQL din√°micas
    3. Ejecuta an√°lisis estad√≠sticos si es necesario
    4. Se autocorrige si hay errores
    5. Genera respuesta estructurada en Markdown
    6. Las im√°genes se manejan de manera token-eficiente
    """
    if not food_security_agent:
        raise HTTPException(
            status_code=503,
            detail="Agente SmolAgents no disponible. Verifica la configuraci√≥n."
        )
    
    # Crear sesi√≥n temporal para an√°lisis √∫nico (sin contexto)
    temp_session_id = session_manager.create_session()
    
    try:
        
        # Limpiar almacenamiento de im√°genes previo
        from core.sql_tools import clear_stored_images, get_stored_images, set_current_session_id
        clear_stored_images(temp_session_id)
        
        # Establecer el contexto para las herramientas de visualizaci√≥n
        set_current_session_id(temp_session_id)
        
        # Ejecutar an√°lisis con el agente
        analysis = food_security_agent.analyze_question(request.question, temp_session_id)
        
        # Obtener im√°genes generadas durante el an√°lisis
        stored_images = get_stored_images(temp_session_id)
        
        # Si hay im√°genes, inyectarlas en el markdown
        if stored_images:
            print(f"üñºÔ∏è Inyectando {len(stored_images)} im√°genes en la respuesta")
            # Crear secci√≥n de visualizaciones si no existe
            if "## üìà Visualizaciones" not in analysis and "üìà Visualizaciones Generadas" not in analysis:
                analysis += "\n\n## üìà Visualizaciones Generadas\n\n"
            
            # Inyectar cada imagen en el markdown
            for image_id, image_info in stored_images.items():
                title = image_info['title']
                image_data = image_info['data']
                chart_type = image_info['type']
                
                print(f"  üìä {title} ({chart_type}) - {len(image_data)} caracteres")
                
                # Agregar imagen al markdown
                analysis += f"\n### {title}\n"
                analysis += f"![{title}]({image_data})\n\n"
        
        # Limpiar almacenamiento temporal y eliminar sesi√≥n temporal
        clear_stored_images(temp_session_id)
        session_manager.delete_session(temp_session_id)
        
        web_search_indicator = " + Web Search" if (
            food_security_agent and 
            hasattr(food_security_agent, 'web_search_tool') and 
            food_security_agent.web_search_tool
        ) else ""
        
        return AnalysisResponse(
            question=request.question,
            analysis=analysis,
            agent_used=f"SmolAgent CodeAgent with Gemini{web_search_indicator} (Token-Optimized)",
            success=True
        )
        
    except Exception as e:
        # Limpiar almacenamiento en caso de error
        from core.sql_tools import clear_stored_images
        clear_stored_images(temp_session_id)
        session_manager.delete_session(temp_session_id)
        
        # En caso de error, a√∫n intentar devolver informaci√≥n √∫til
        error_analysis = food_security_agent._generate_error_response(str(e), request.question) if food_security_agent else f"Error: {str(e)}"
        
        return AnalysisResponse(
            question=request.question,
            analysis=error_analysis,
            agent_used="SmolAgent (Error Mode)",
            success=False
        )


@app.post("/chat", response_model=ConversationResponse)
async def chat_conversation(request: ConversationRequest):
    """
    Endpoint para conversaciones con contexto. Mantiene el historial de la conversaci√≥n
    y permite hacer preguntas de seguimiento.
    """
    if not food_security_agent:
        raise HTTPException(
            status_code=503,
            detail="Agente SmolAgents no disponible. Verifica la configuraci√≥n."
        )
    
    try:
        # Crear nueva sesi√≥n si no se proporciona
        if not request.session_id:
            session_id = session_manager.create_session()
        else:
            session_id = request.session_id
            # Verificar que la sesi√≥n existe
            if not session_manager.get_session(session_id):
                raise HTTPException(
                    status_code=404,
                    detail=f"Sesi√≥n {session_id} no encontrada o expirada"
                )
        
        # Agregar pregunta del usuario a la conversaci√≥n
        user_message = session_manager.add_message(session_id, "user", request.question)
        
        # Limpiar im√°genes previas de la sesi√≥n
        from core.sql_tools import clear_stored_images, get_stored_images, set_current_session_id
        clear_stored_images(session_id)
        
        # Establecer el contexto para las herramientas de visualizaci√≥n
        set_current_session_id(session_id)
        
        # Ejecutar an√°lisis con contexto de conversaci√≥n
        analysis = food_security_agent.analyze_question(request.question, session_id)
        
        # Obtener im√°genes generadas durante el an√°lisis
        stored_images = get_stored_images(session_id)
        
        # Preparar lista de im√°genes para el mensaje del asistente
        message_images = []
        if stored_images:
            print(f"üñºÔ∏è Inyectando {len(stored_images)} im√°genes en la respuesta")
            # Crear secci√≥n de visualizaciones si no existe
            if "## üìà Visualizaciones" not in analysis and "üìà Visualizaciones Generadas" not in analysis:
                analysis += "\n\n## üìà Visualizaciones Generadas\n\n"
            
            # Inyectar cada imagen en el markdown y guardar referencia
            for image_id, image_info in stored_images.items():
                title = image_info['title']
                image_data = image_info['data']
                chart_type = image_info['type']
                
                print(f"  üìä {title} ({chart_type}) - {len(image_data)} caracteres")
                
                # Agregar imagen al markdown
                analysis += f"\n### {title}\n"
                analysis += f"![{title}]({image_data})\n\n"
                
                # Guardar referencia de imagen para el mensaje
                message_images.append({
                    'id': image_id,
                    'title': title,
                    'type': chart_type
                })
        
        # Agregar respuesta del asistente a la conversaci√≥n
        assistant_message = session_manager.add_message(session_id, "assistant", analysis, message_images)
        
        # Obtener resumen de la conversaci√≥n
        conversation_summary = session_manager.get_session_summary(session_id)
        
        web_search_indicator = " + Web Search" if (
            food_security_agent and 
            hasattr(food_security_agent, 'web_search_tool') and 
            food_security_agent.web_search_tool
        ) else ""
        
        return ConversationResponse(
            question=request.question,
            analysis=analysis,
            session_id=session_id,
            message_id=assistant_message.id,
            agent_used=f"SmolAgent with Context{web_search_indicator}",
            success=True,
            conversation_summary=conversation_summary
        )
        
    except HTTPException:
        raise
    except Exception as e:
        # En caso de error, a√∫n intentar devolver informaci√≥n √∫til
        error_analysis = food_security_agent._generate_error_response(str(e), request.question) if food_security_agent else f"Error: {str(e)}"
        
        # Si hab√≠a un session_id v√°lido, agregar el error como mensaje del asistente
        if request.session_id and session_manager.get_session(request.session_id):
            session_manager.add_message(request.session_id, "assistant", error_analysis)
            conversation_summary = session_manager.get_session_summary(request.session_id)
        else:
            conversation_summary = {}
        
        return ConversationResponse(
            question=request.question,
            analysis=error_analysis,
            session_id=request.session_id or "error",
            message_id="error",
            agent_used="SmolAgent (Error Mode)",
            success=False,
            conversation_summary=conversation_summary
        )


@app.post("/session/new", response_model=SessionResponse)
async def create_new_session():
    """
    Crea una nueva sesi√≥n de conversaci√≥n.
    """
    try:
        session_id = session_manager.create_session()
        conversation = session_manager.get_session(session_id)
        
        return SessionResponse(
            session_id=session_id,
            created_at=conversation.created_at.isoformat(),
            message="Nueva sesi√≥n de conversaci√≥n creada exitosamente"
        )
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"Error creando sesi√≥n: {str(e)}"
        )


@app.get("/session/{session_id}")
async def get_session_info(session_id: str):
    """
    Obtiene informaci√≥n de una sesi√≥n espec√≠fica.
    """
    conversation = session_manager.get_session(session_id)
    if not conversation:
        raise HTTPException(
            status_code=404,
            detail="Sesi√≥n no encontrada o expirada"
        )
    
    return {
        "session_info": session_manager.get_session_summary(session_id),
        "conversation": conversation.to_dict()
    }


@app.delete("/session/{session_id}")
async def delete_session(session_id: str):
    """
    Elimina una sesi√≥n espec√≠fica.
    """
    conversation = session_manager.get_session(session_id)
    if not conversation:
        raise HTTPException(
            status_code=404,
            detail="Sesi√≥n no encontrada"
        )
    
    session_manager.delete_session(session_id)
    return {"message": f"Sesi√≥n {session_id} eliminada exitosamente"}


# ===== ENDPOINTS DE INFORMACI√ìN =====

@app.get("/schema")
async def get_database_schema():
    """Obtiene el esquema completo de la base de datos."""
    if not food_security_agent:
        raise HTTPException(
            status_code=503,
            detail="Agente no disponible"
        )
    
    try:
        schema_info = food_security_agent.get_database_info()
        return {"schema": schema_info}
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"Error obteniendo esquema: {str(e)}"
        )


@app.get("/status")
async def get_agent_status():
    """Obtiene el estado detallado del agente y sus componentes."""
    if not food_security_agent:
        return {
            "agent_available": False,
            "error": "Agente SmolAgents no inicializado",
            "components": {
                "database": False,
                "model": False,
                "agent": False,
                "api_key": False,
                "web_search": False
            }
        }
    
    try:
        status = food_security_agent.test_connection()
        return {
            "agent_available": True,
            "components": {
                "database": status["database"],
                "model": status["model"], 
                "agent": status["agent"],
                "api_key": status["api_key"],
                "web_search": status["web_search"]
            },
            "errors": status["errors"],
            "system_ready": all([
                status["database"],
                status["model"],
                status["agent"]
            ])
        }
    except Exception as e:
        return {
            "agent_available": False,
            "error": f"Error verificando estado: {str(e)}",
            "components": {
                "database": False,
                "model": False,
                "agent": False,
                "api_key": False,
                "web_search": False
            }
        }


@app.get("/health")
async def health_check():
    """Verifica el estado b√°sico del sistema."""
    db_exists = os.path.exists(str(settings.database.db_path))
    api_key_configured = bool(
        settings.api.gemini_api_key and 
        settings.api.gemini_api_key != "TU_API_KEY_DE_GEMINI_AQUI"
    )
    agent_available = food_security_agent is not None
    web_search_available = bool(
        food_security_agent and 
        hasattr(food_security_agent, 'web_search_tool') and 
        food_security_agent.web_search_tool
    )
    
    return {
        "status": "healthy" if (db_exists and agent_available) else "degraded",
        "database": "OK" if db_exists else "ERROR",
        "agent": "OK" if agent_available else "ERROR", 
        "api_key": "OK" if api_key_configured else "NOT_CONFIGURED",
        "web_search": "OK" if web_search_available else "NOT_AVAILABLE",
        "message": "Sistema SmolAgents operativo" if (db_exists and agent_available) else "Revisar configuraci√≥n"
    }


# ===== ENDPOINTS DE UTILIDAD =====

@app.get("/examples")
async def get_examples():
    """Obtiene ejemplos de preguntas que se pueden hacer al agente."""
    examples = {
        "basicas": [
            "¬øCu√°l es la situaci√≥n de inseguridad alimentaria en Colombia?",
            "¬øQu√© departamentos tienen mayor inseguridad alimentaria en 2022?",
            "¬øC√≥mo est√° la situaci√≥n en Antioquia?"
        ],
        "comparativas": [
            "Compara la inseguridad alimentaria entre Antioquia y Cundinamarca",
            "¬øCu√°l es la diferencia entre inseguridad grave y moderada?",
            "Compara los datos de 2022 vs 2023"
        ],
        "estadisticas_con_tablas": [
            "¬øCu√°les son las estad√≠sticas descriptivas de inseguridad moderada en 2023? Muestra los resultados en una tabla",
            "Calcula la media y desviaci√≥n est√°ndar por departamento y presenta en tabla formateada",
            "¬øCu√°l es la distribuci√≥n de inseguridad alimentaria por regiones? Incluye tabla y palabras clave del an√°lisis"
        ],
        "rankings": [
            "Muestra los 10 departamentos con mayor inseguridad alimentaria",
            "¬øCu√°les son los 5 municipios m√°s afectados en Antioquia?",
            "Ranking de regiones por prevalencia de inseguridad"
        ],
        "temporales": [
            "¬øC√≥mo ha evolucionado la inseguridad alimentaria en Colombia?",
            "Muestra la tendencia temporal para Bogot√°",
            "¬øEn qu√© a√±os hubo mayor inseguridad alimentaria?"
        ],
        "visualizaciones": [
            "Crea una gr√°fica de barras que muestre los 10 departamentos con mayor inseguridad alimentaria grave en 2022",
            "Analiza con gr√°ficas la distribuci√≥n de inseguridad alimentaria por regiones en Colombia",
            "Haz un an√°lisis completo con visualizaciones de la evoluci√≥n temporal",
            "Genera m√∫ltiples gr√°ficas: una de barras por departamento y otra circular por regiones",
            "Crea un histograma de la distribuci√≥n de inseguridad moderada en 2023"
        ],
        "contextuales_con_citas": [
            "¬øCu√°les son las principales pol√≠ticas p√∫blicas de Colombia para combatir la inseguridad alimentaria y c√≥mo se relacionan con nuestros datos? (incluye fuentes)",
            "Analiza la situaci√≥n de inseguridad alimentaria en Choc√≥ y complementa con informaci√≥n sobre las causas del conflicto armado con fuentes verificables",
            "Compara nuestros datos con estad√≠sticas internacionales de inseguridad alimentaria en Am√©rica Latina y cita las fuentes consultadas",
            "¬øQu√© programas gubernamentales actuales existen para atender la inseguridad alimentaria en las zonas m√°s afectadas? (con referencias web)",
            "Contextualiza los datos de 2022-2024 con eventos recientes que puedan haber afectado la seguridad alimentaria, citando fuentes confiables",
            "Investiga las causas principales de inseguridad alimentaria en Colombia seg√∫n organizaciones internacionales y contrasta con nuestros datos"
        ]
    }
    
    return {
        "message": "Ejemplos de preguntas para el agente SmolAgents",
        "categories": examples,
        "tip": "El agente puede combinar m√∫ltiples tipos de an√°lisis en una sola consulta",
        "chat_info": {
            "description": "Usa /chat para conversaciones con contexto y seguimiento",
            "url": "/chat",
            "features": [
                "Mantiene contexto de conversaciones previas",
                "Preguntas de seguimiento inteligentes", 
                "Sesiones de usuario independientes",
                "Interfaz de chat en tiempo real"
            ]
        }
    }


if __name__ == "__main__":
    print("üöÄ Iniciando servidor FastAPI con SmolAgents...")
    print_settings_summary()
    print(f"üìñ Documentaci√≥n: http://{settings.server.host}:{settings.server.port}/docs")
    print(f"üè† P√°gina principal: http://{settings.server.host}:{settings.server.port}")
    print(f"ü§ñ An√°lisis AI: POST http://{settings.server.host}:{settings.server.port}/analyze")
    
    uvicorn.run(
        "main:app",
        host=settings.server.host,
        port=settings.server.port,
        reload=settings.server.reload,
        log_level=settings.logging.log_level.lower()
    ) 