"""
Agente SmolAgents para an√°lisis de datos de inseguridad alimentaria.

Este m√≥dulo configura un CodeAgent que puede:
- Consultar la base de datos SQLite usando SQL directo
- Realizar an√°lisis estad√≠sticos con pandas y numpy
- Autocorregirse si las consultas son incorrectas
- Iterar hasta obtener resultados correctos
- Crear visualizaciones con matplotlib
"""

import os
from typing import Dict, Any, List
from smolagents import CodeAgent, LiteLLMModel
from .settings import get_settings
from .sql_tools import (
    sql_query,
    get_database_schema,
    analyze_data_pandas,
    get_top_entities,
    compare_years,
    calculate_statistics,
    create_formatted_table,
    get_available_years,
    get_available_indicators,
    get_entities_by_level,
    quick_summary,
    create_chart_visualization,
    create_multiple_charts,
    analyze_and_visualize
)


class InseguridadAlimentariaAgent:
    """
    Agente especializado en an√°lisis de datos de inseguridad alimentaria en Colombia.
    
    Utiliza SmolAgents con LiteLLM para conectar con Gemini y generar an√°lisis
    inteligentes usando consultas SQL directas y an√°lisis estad√≠sticos.
    """
    
    def __init__(self):
        self.settings = get_settings()
        self.model = None
        self.agent = None
        self._initialize_model()
        self._initialize_agent()
    
    def _initialize_model(self):
        """Inicializa el modelo LiteLLM con Gemini usando configuraci√≥n tipada."""
        api_config = self.settings.api
        
        if not api_config.gemini_api_key or api_config.gemini_api_key == "TU_API_KEY_DE_GEMINI_AQUI":
            print("‚ö†Ô∏è Advertencia: GEMINI_API_KEY no configurada correctamente")
            print("üîß Configura tu API key en el archivo .env")
            # Usar modelo por defecto para testing
            self.model = LiteLLMModel(model_id=api_config.gemini_model)
        else:
            self.model = LiteLLMModel(
                model_id=api_config.gemini_model,
                api_key=api_config.gemini_api_key,
                temperature=api_config.gemini_temperature,
                max_tokens=api_config.gemini_max_tokens
            )
    
    def _initialize_agent(self):
        """Inicializa el CodeAgent con todas las herramientas disponibles."""
        tools = [
            sql_query,
            get_database_schema,
            analyze_data_pandas,
            get_top_entities,
            compare_years,
            calculate_statistics,
            create_formatted_table,
            get_available_years,
            get_available_indicators,
            get_entities_by_level,
            quick_summary,
            create_chart_visualization,
            create_multiple_charts,
            analyze_and_visualize
        ]
        
        agent_config = self.settings.agent
        
        self.agent = CodeAgent(
            tools=tools,
            model=self.model,
            additional_authorized_imports=agent_config.authorized_imports,
            max_steps=agent_config.max_steps,
            verbosity_level=agent_config.verbosity_level
        )
    
    def analyze_question(self, question: str) -> str:
        """
        Analiza una pregunta en lenguaje natural sobre inseguridad alimentaria.
        
        El agente:
        1. Interpreta la pregunta
        2. Decide qu√© herramientas usar
        3. Escribe c√≥digo Python para consultar los datos
        4. Analiza los resultados
        5. Se autocorrige si algo est√° mal
        6. Genera una respuesta en Markdown
        
        Args:
            question: Pregunta del usuario en lenguaje natural
            
        Returns:
            An√°lisis completo en formato Markdown
        """
        try:
            # Preparar el prompt con contexto espec√≠fico
            enhanced_question = self._enhance_question_with_context(question)
            
            # Ejecutar el agente
            result = self.agent.run(enhanced_question)
            
            return self._format_response(result, question)
            
        except Exception as e:
            error_message = f"Error ejecutando an√°lisis: {str(e)}"
            print(f"‚ùå {error_message}")
            
            return self._generate_error_response(error_message, question)
    
    def _enhance_question_with_context(self, question: str) -> str:
        """
        Mejora la pregunta del usuario con contexto sobre la base de datos y capacidades.
        """
        context = """
Eres un analista experto en datos de inseguridad alimentaria en Colombia. 

CONTEXTO DE LA BASE DE DATOS:
- Tienes acceso a datos normalizados de inseguridad alimentaria en Colombia
- Los datos incluyen informaci√≥n nacional, regional, departamental y municipal
- Per√≠odo: principalmente 2022-2024, con algunos datos de 2015
- 3 indicadores principales:
  1. "Inseguridad Alimentaria Grave" 
  2. "Inseguridad Alimentaria Moderado o Grave"
  3. "Prevalencia de hogares en inseguridad alimentaria"

HERRAMIENTAS DISPONIBLES:
- sql_query: Para consultas SQL directas
- get_database_schema: Para explorar la estructura de datos
- analyze_data_pandas: Para an√°lisis estad√≠sticos avanzados
- get_top_entities: Para rankings de entidades
- compare_years: Para an√°lisis temporal
- calculate_statistics: Para estad√≠sticas descriptivas
- create_chart_visualization: Para crear gr√°ficas individuales con matplotlib
- create_multiple_charts: Para crear m√∫ltiples gr√°ficas
- analyze_and_visualize: Para an√°lisis completo con gr√°ficas autom√°ticas

INSTRUCCIONES PARA VISUALIZACIONES:
1. SIEMPRE incluye gr√°ficas cuando sea apropiado para mostrar datos
2. Usa create_chart_visualization para gr√°ficas espec√≠ficas
3. Usa analyze_and_visualize para an√°lisis completos con visualizaciones autom√°ticas
4. Los tipos de gr√°ficas disponibles son: bar, line, pie, scatter, histogram
5. Las herramientas son TOKEN-EFICIENTES: solo retornan confirmaciones cortas
6. Las gr√°ficas se almacenan temporalmente y aparecen autom√°ticamente en el frontend
7. NO esperes recibir im√°genes base64 en las respuestas de las herramientas
8. Incluye t√≠tulos descriptivos y especifica columnas para mejor visualizaci√≥n

INSTRUCCIONES GENERALES:
1. SIEMPRE empieza explorando la base de datos si no est√°s seguro del esquema
2. Usa consultas SQL precisas y bien estructuradas
3. Si una consulta falla, analiza el error y corr√≠gela
4. Proporciona an√°lisis estad√≠sticos relevantes
5. Presenta los resultados en formato Markdown estructurado
6. Incluye contexto y interpretaci√≥n de los datos
7. Si los datos son limitados, menciona las limitaciones
8. TODAS LAS PREGUNTAS DEBEN SER ENFOCADAS EN EL AN√ÅLISIS DE INSEGURIDAD ALIMENTARIA EN COLOMBIA,  NO SE DEBEN HACER PREGUNTAS QUE NO SEAN RELACIONADAS CON LA INSEGURIDAD ALIMENTARIA EN COLOMBIA. SI HACES UNA PREGUNTA QUE NO SEA RELACIONADA CON LA INSEGURIDAD ALIMENTARIA EN COLOMBIA, SE RECHAZA LA PREGUNTA.
PREGUNTA DEL USUARIO:
"""
        return context + question
    
    def _format_response(self, result: str, original_question: str) -> str:
        """Formatea la respuesta del agente en Markdown estructurado."""
        
        # Si el resultado ya est√° bien formateado, devolverlo tal como est√°
        if result and "# " in result:
            return result
        
        # Si no, crear estructura b√°sica
        formatted = f"""# An√°lisis de Inseguridad Alimentaria

## Pregunta
{original_question}

## Respuesta del Agente
{result}

## Metodolog√≠a
Este an√°lisis fue generado usando consultas SQL directas sobre la base de datos normalizada de inseguridad alimentaria de Colombia, con an√°lisis estad√≠sticos usando pandas y numpy.

---
*Generado por el Analista AI especializado en datos de inseguridad alimentaria, puede cometer errores, por favor verifica la respuesta y corrige los errores.*
"""
        return formatted
    
    def _generate_error_response(self, error_message: str, question: str) -> str:
        """Genera una respuesta de error estructurada."""
        return f"""# Error en el An√°lisis

## Pregunta
{question}

## Error Encontrado
```
{error_message}
```

## Posibles Soluciones
1. **Verificar la configuraci√≥n**: Aseg√∫rate de que GEMINI_API_KEY est√© configurada
2. **Reformular la pregunta**: Intenta ser m√°s espec√≠fico sobre qu√© datos necesitas
3. **Revisar la base de datos**: Los datos est√°n disponibles principalmente para 2022-2024

## Ejemplos de Preguntas V√°lidas
- "¬øCu√°l es la situaci√≥n de inseguridad alimentaria en Colombia?"
- "¬øQu√© departamentos tienen mayor inseguridad alimentaria grave en 2022?"
- "¬øC√≥mo evolucion√≥ la inseguridad alimentaria en Antioquia?"
- "¬øCu√°les son las estad√≠sticas descriptivas de inseguridad alimentaria moderada en 2023?"


---
*Por favor, verifica la configuraci√≥n e intenta nuevamente*
"""
    
    def get_database_info(self) -> str:
        """
        Obtiene informaci√≥n b√°sica sobre la base de datos disponible.
        
        Returns:
            Informaci√≥n sobre esquema y datos disponibles
        """
        try:
            # Usar la herramienta directamente
            return get_database_schema()
        except Exception as e:
            return f"Error obteniendo informaci√≥n de la base de datos: {str(e)}"
    
    def test_connection(self) -> Dict[str, Any]:
        """
        Prueba la conexi√≥n y configuraci√≥n del agente.
        
        Returns:
            Estado de los componentes del sistema
        """
        status = {
            "database": False,
            "model": False,
            "agent": False,
            "api_key": False,
            "errors": []
        }
        
        try:
            # Verificar base de datos
            db_path = str(self.settings.database.db_path)
            if os.path.exists(db_path):
                status["database"] = True
            else:
                status["errors"].append(f"Base de datos no encontrada: {db_path}")
            
            # Verificar API key
            api_key = self.settings.api.gemini_api_key
            if api_key and api_key != "TU_API_KEY_DE_GEMINI_AQUI":
                status["api_key"] = True
            else:
                status["errors"].append("GEMINI_API_KEY no configurada")
            
            # Verificar modelo
            if self.model:
                status["model"] = True
            else:
                status["errors"].append("Modelo LiteLLM no inicializado")
            
            # Verificar agente
            if self.agent:
                status["agent"] = True
            else:
                status["errors"].append("CodeAgent no inicializado")
                
        except Exception as e:
            status["errors"].append(f"Error en verificaci√≥n: {str(e)}")
        
        return status


# Instancia global del agente
try:
    food_security_agent = InseguridadAlimentariaAgent()
    print("‚úÖ Agente SmolAgents inicializado correctamente")
except Exception as e:
    print(f"‚ùå Error inicializando agente: {e}")
    food_security_agent = None 