"""
Agente SmolAgents para an√°lisis de datos de inseguridad alimentaria.

Este m√≥dulo configura un CodeAgent que puede:
- Consultar la base de datos SQLite usando SQL directo y flexible
- Explorar la estructura de la base de datos din√°micamente
- Realizar an√°lisis estad√≠sticos con pandas y numpy
- Autocorregirse si las consultas son incorrectas
- Iterar hasta obtener resultados correctos
- Crear visualizaciones con matplotlib
- Buscar informaci√≥n complementaria en internet usando DuckDuckGo
- Acceder a documentos especializados usando RAG (Retrieval-Augmented Generation)
"""

import os
from typing import Dict, Any
from smolagents import CodeAgent, LiteLLMModel, WebSearchTool
from .settings import get_settings
from .sql_tools import (
    sql_query,
    get_database_schema,
    analyze_data_pandas,
    create_formatted_table,
    create_formatted_markdown_table,
    create_chart_visualization,
    create_multiple_charts,
    analyze_and_visualize,
    format_web_citation,
    create_sources_section,
)
from .rag_tools import search_food_security_documents, get_rag_system_status


class InseguridadAlimentariaAgent:
    """
    Agente especializado en an√°lisis de datos de inseguridad alimentaria en Colombia.

    Utiliza SmolAgents con LiteLLM para conectar con Gemini y generar an√°lisis
    inteligentes usando consultas SQL flexibles, an√°lisis estad√≠sticos, y b√∫squedas web.

    El agente puede crear sus propias consultas SQL para cualquier an√°lisis requerido,
    lo que lo hace flexible y adaptable a cambios en la estructura de la base de datos.
    """

    def __init__(self):
        self.settings = get_settings()
        self.model = None
        self.agent = None
        self.web_search_tool = None
        self._initialize_web_search()
        self._initialize_model()
        self._initialize_agent()

    def _initialize_web_search(self):
        """Inicializa la herramienta de b√∫squeda web con DuckDuckGo."""
        try:
            self.web_search_tool = WebSearchTool()
            print("‚úÖ Herramienta de b√∫squeda web DuckDuckGo inicializada")
        except Exception as e:
            print(f"‚ö†Ô∏è Error inicializando b√∫squeda web: {e}")
            self.web_search_tool = None

    def _initialize_model(self):
        """Inicializa el modelo LiteLLM con Gemini usando configuraci√≥n tipada."""
        api_config = self.settings.api

        if (
            not api_config.gemini_api_key
            or api_config.gemini_api_key == "TU_API_KEY_DE_GEMINI_AQUI"
        ):
            print("‚ö†Ô∏è Advertencia: GEMINI_API_KEY no configurada correctamente")
            print("üîß Configura tu API key en el archivo .env")
            # Usar modelo por defecto para testing
            self.model = LiteLLMModel(model_id=api_config.gemini_model)
        else:
            self.model = LiteLLMModel(
                model_id=api_config.gemini_model,
                api_key=api_config.gemini_api_key,
                temperature=api_config.gemini_temperature,
                max_tokens=api_config.gemini_max_tokens,
            )

    def _initialize_agent(self):
        """Inicializa el CodeAgent con las herramientas esenciales y flexibles."""
        # Herramientas esenciales - flexibles y adaptables
        tools = [
            # Herramientas principales para acceso a datos
            sql_query,  # Consultas SQL flexibles
            get_database_schema,  # Exploraci√≥n de estructura
            analyze_data_pandas,  # An√°lisis estad√≠stico avanzado
            # Herramientas de presentaci√≥n y formato
            create_formatted_table,  # Tablas b√°sicas
            create_formatted_markdown_table,  # Tablas Markdown correctas
            # Herramientas de visualizaci√≥n
            create_chart_visualization,  # Gr√°ficas individuales
            create_multiple_charts,  # M√∫ltiples gr√°ficas
            analyze_and_visualize,  # An√°lisis completo con gr√°ficas
            # Herramientas de fuentes y documentaci√≥n
            format_web_citation,  # Formateo de citas
            create_sources_section,  # Secci√≥n de fuentes
            # Herramientas RAG (Retrieval-Augmented Generation)
            search_food_security_documents,  # B√∫squeda en documentos especializados
            get_rag_system_status,  # Estado del sistema RAG
        ]

        # Agregar herramienta de b√∫squeda web si est√° disponible
        if self.web_search_tool:
            tools.append(self.web_search_tool)
            print("üîç B√∫squeda web habilitada en el agente")

        # Verificar estado del RAG
        if self.settings.rag.enable_rag:
            print("üìö Sistema RAG habilitado - Documentos especializados disponibles")
        else:
            print("‚ö†Ô∏è Sistema RAG deshabilitado en configuraci√≥n")

        agent_config = self.settings.agent

        self.agent = CodeAgent(
            tools=tools,
            model=self.model,
            additional_authorized_imports=agent_config.authorized_imports,
            max_steps=agent_config.max_steps,
            verbosity_level=agent_config.verbosity_level,
        )

        print(f"ü§ñ Agente inicializado con {len(tools)} herramientas esenciales")

    def analyze_question(self, question: str, session_id: str = None) -> str:
        """
        Analiza una pregunta en lenguaje natural sobre inseguridad alimentaria.

        El agente:
        1. Interpreta la pregunta
        2. Explora la estructura de la base de datos si es necesario
        3. Crea consultas SQL flexibles seg√∫n lo requiera
        4. Analiza los resultados con pandas
        5. Se autocorrige si algo est√° mal
        6. Genera visualizaciones apropiadas
        7. Complementa con b√∫squedas web si es √∫til
        8. Produce una respuesta completa en Markdown con palabras clave inteligentes

        Args:
            question: Pregunta del usuario en lenguaje natural

        Returns:
            An√°lisis completo en formato Markdown
        """
        try:
            # Establecer el contexto del session_id para las herramientas
            from .sql_tools import set_current_session_id

            if session_id:
                set_current_session_id(session_id)

            # Preparar el prompt con contexto espec√≠fico
            enhanced_question = self._enhance_question_with_context(
                question, session_id
            )

            # Ejecutar el agente
            result = self.agent.run(enhanced_question)

            return self._format_response(result, question)

        except Exception as e:
            error_message = f"Error ejecutando an√°lisis: {str(e)}"
            print(f"‚ùå {error_message}")

            return self._generate_error_response(error_message, question)

    def _enhance_question_with_context(
        self, question: str, session_id: str = None
    ) -> str:
        """
        Mejora la pregunta del usuario con contexto sobre la base de datos y capacidades.
        """
        from .session_manager import session_manager

        web_search_status = (
            "‚úÖ Disponible" if self.web_search_tool else "‚ùå No disponible"
        )

        # Obtener contexto espec√≠fico de la base de datos si est√° habilitado
        specific_context = ""
        if self.settings.database_context.include_context_in_prompt:
            specific_context = self.settings.database_context.get_context_content()

        # Obtener contexto de conversaci√≥n previa si hay session_id
        conversation_context = ""
        if session_id:
            conversation_context = session_manager.format_context_for_agent(session_id)

        context = f"""
Eres un analista experto en datos. Eres COMPLETAMENTE FLEXIBLE y DIN√ÅMICO.

{conversation_context}

{specific_context if specific_context else ""}
{"=" * 50 if specific_context else ""}

FILOSOF√çA DE TRABAJO:
- Eres FLEXIBLE y ADAPTABLE: puedes trabajar con CUALQUIER base de datos
- NO asumes NADA sobre la estructura de datos - la descubres din√°micamente
- SIEMPRE exploras la base de datos primero si no conoces su estructura
- Creas an√°lisis personalizados para cada pregunta espec√≠fica
- Te adaptas a cualquier dominio de datos (alimentaria, salud, econom√≠a, etc.)

HERRAMIENTAS DISPONIBLES:

üîç EXPLORACI√ìN Y CONSULTA (Principales):
- sql_query: Tu herramienta M√ÅS IMPORTANTE - ejecuta cualquier SQL que necesites
- get_database_schema: Explora la estructura completa de CUALQUIER base de datos
- analyze_data_pandas: An√°lisis estad√≠stico avanzado de cualquier resultado SQL

üìä PRESENTACI√ìN Y FORMATO:
- create_formatted_table: Tablas b√°sicas
- create_formatted_markdown_table: Tablas Markdown perfectamente formateadas

üìà VISUALIZACI√ìN:
- create_chart_visualization: Gr√°ficas individuales (bar, line, pie, scatter, histogram)
- create_multiple_charts: M√∫ltiples visualizaciones
- analyze_and_visualize: An√°lisis completo con gr√°ficas autom√°ticas

üìö DOCUMENTACI√ìN:
- format_web_citation: Formateo de citas en estilo APA
- create_sources_section: Secciones de fuentes bien formateadas
- WebSearchTool: {web_search_status} - Para informaci√≥n contextual complementaria

üîç RAG (RETRIEVAL-AUGMENTED GENERATION):
- search_food_security_documents: B√∫squeda sem√°ntica en documentos especializados sobre seguridad alimentaria
- get_rag_system_status: Verificar estado del sistema RAG y base de datos vectorial

STATUS DEL SISTEMA RAG: {"‚úÖ Habilitado" if self.settings.rag.enable_rag else "‚ùå Deshabilitado"}

NOTA IMPORTANTE SOBRE RAG:
- Usa search_food_security_documents para obtener informaci√≥n t√©cnica y especializada sobre:
  * Pol√≠ticas de seguridad alimentaria
  * Marcos normativos y reglamentarios
  * Metodolog√≠as de medici√≥n de inseguridad alimentaria
  * Programas gubernamentales e intervenciones
  * Estudios especializados y reportes t√©cnicos
  * Conceptos t√©cnicos y definiciones oficiales
- Esta informaci√≥n complementa perfectamente tus an√°lisis de datos cuantitativos
- Combina datos estad√≠sticos (SQL) con conocimiento especializado (RAG) para an√°lisis completos

METODOLOG√çA DE TRABAJO DIN√ÅMICA:

1. üîç EXPLORACI√ìN INICIAL OBLIGATORIA:
   - SIEMPRE usa get_database_schema PRIMERO si no conoces la estructura
   - NO asumas nombres de tablas, columnas o tipos de datos
   - Identifica tablas disponibles, columnas, tipos de datos y relaciones
   - Detecta patrones temporales, categ√≥ricos y num√©ricos autom√°ticamente

2. üìù CONSULTAS SQL COMPLETAMENTE DIN√ÅMICAS:
   - Construye consultas basadas SOLO en la informaci√≥n del esquema actual
   - Usa los nombres reales de tablas y columnas que encontraste
   - Aprovecha las claves for√°neas detectadas para JOINs apropiados
   - Adapta tu an√°lisis al tipo de datos disponible

3. üìä AN√ÅLISIS INTELIGENTE Y CONTEXTUAL:
   - Usa analyze_data_pandas para estad√≠sticas profundas de cualquier dato
   - Interpreta los resultados en el contexto del dominio detectado
   - Identifica patrones, outliers, tendencias sin asumir el tipo de datos

4. üìà VISUALIZACI√ìN APROPIADA:
   - Elige gr√°ficas bas√°ndote en el tipo de datos que encontraste
   - Usa columnas reales para ejes X e Y
   - T√≠tulos descriptivos basados en datos reales

5. üåê CONTEXTO COMPLEMENTARIO INTELIGENTE:
   - Usa b√∫squedas web para contexto relevante al dominio detectado
   - Adapta t√©rminos de b√∫squeda al tema de los datos
   - Al final, usa create_sources_section para formatear autom√°ticamente todas las fuentes web

INSTRUCCIONES OBLIGATORIAS:

‚úÖ SIEMPRE EXPLORA PRIMERO:
- Comienza OBLIGATORIAMENTE con get_database_schema
- NO asumas NADA sobre nombres de tablas o columnas
- Basa TODO tu an√°lisis en la informaci√≥n real del esquema

‚úÖ SQL COMPLETAMENTE DIN√ÅMICO:
- Construye consultas usando nombres reales de tablas/columnas
- Usa las relaciones detectadas autom√°ticamente
- Adapta filtros y agrupaciones a los datos disponibles
- Nunca hardcodees nombres de tablas o campos

‚úÖ FORMATO PROFESIONAL:
- Usa create_formatted_markdown_table para datos tabulares importantes
- Incluye visualizaciones apropiadas para el tipo de datos
- Estructura tu respuesta en Markdown claro

‚úÖ CITAS Y FUENTES:
- Si usas b√∫squedas web, usa SOLO la herramienta create_sources_section al final
- NO crees manualmente secciones "Fuentes Consultadas" - usa la herramienta
- Formato APA autom√°tico para todas las fuentes web
- Separa claramente datos locales de informaci√≥n web

‚úÖ PALABRAS CLAVE INTELIGENTES:
- AL FINAL de tu an√°lisis, incluye una secci√≥n "## üè∑Ô∏è Palabras Clave"
- Genera 5-10 palabras clave relevantes bas√°ndote en tu an√°lisis realizado
- Incluye t√©rminos reales encontrados en los datos (nombres de tablas, columnas importantes, valores categ√≥ricos relevantes)
- Formato: "**Palabras clave:** [palabra1], [palabra2], [palabra3], ..."
- S√â INTELIGENTE: basa las palabras clave en el contenido real de tu an√°lisis

EJEMPLOS DE METODOLOG√çA DIN√ÅMICA:

üéØ Paso 1 - Exploraci√≥n:
```
1. get_database_schema() -> descubrir tablas "productos", "ventas", "clientes"
2. Identificar relaciones: ventas.producto_id ‚Üí productos.id
3. Detectar columnas temporales: ventas.fecha
4. Detectar categ√≥ricas: productos.categoria, clientes.region
```

üéØ Paso 2 - Consulta din√°mica:
```sql
-- Basado en esquema real descubierto
SELECT p.categoria, SUM(v.monto) as total_ventas
FROM ventas v 
JOIN productos p ON v.producto_id = p.id
WHERE v.fecha >= '2023-01-01'
GROUP BY p.categoria 
ORDER BY total_ventas DESC
```

üéØ Adaptabilidad:
- Si los datos son de salud: busca patrones m√©dicos, usa terminolog√≠a de salud
- Si son financieros: busca tendencias econ√≥micas, usa t√©rminos financieros  
- Si son alimentarios: busca patrones nutricionales, usa contexto de seguridad alimentaria
- El agente se adapta autom√°ticamente al dominio de los datos

REGLAS CR√çTICAS:
‚ùå NUNCA asumas nombres de tablas espec√≠ficas
‚ùå NUNCA uses queries hardcodeadas  
‚ùå NUNCA hagas suposiciones sobre la estructura de datos
‚ùå NUNCA crees manualmente secciones "Fuentes Consultadas"
‚úÖ SIEMPRE explora primero con get_database_schema
‚úÖ SIEMPRE construye queries din√°micamente
‚úÖ SIEMPRE adapta tu an√°lisis al tipo de datos encontrado
‚úÖ USA create_sources_section para fuentes web (evita duplicados)

PREGUNTA DEL USUARIO:
"""
        return context + question

    def _format_response(self, result: str, original_question: str) -> str:
        """Formatea la respuesta del agente en Markdown estructurado."""

        # Si el resultado ya est√° bien formateado, devolverlo tal como est√°
        if result and "# " in result:
            return result

        # Si no, crear estructura b√°sica
        formatted = f"""# An√°lisis de Inseguridad Alimentaria

## Pregunta
{original_question}

## Respuesta del Agente
{result}

## Metodolog√≠a
Este an√°lisis fue generado usando consultas SQL flexibles sobre la base de datos de inseguridad alimentaria de Colombia, con an√°lisis estad√≠sticos usando pandas y numpy, y visualizaciones con matplotlib.

---
*Generado por el Analista AI especializado en datos de inseguridad alimentaria. Puede cometer errores, por favor verifica la respuesta.*
"""
        return formatted

    def _generate_error_response(self, error_message: str, question: str) -> str:
        """Genera una respuesta de error estructurada."""
        return f"""# Error en el An√°lisis

## Pregunta
{question}

## Error Encontrado
```
{error_message}
```

## Posibles Soluciones
1. **Verificar la configuraci√≥n**: Aseg√∫rate de que GEMINI_API_KEY est√© configurada
2. **Reformular la pregunta**: Intenta ser m√°s espec√≠fico sobre qu√© datos necesitas
3. **Revisar la base de datos**: Usa get_database_schema para explorar los datos disponibles

## Ejemplos de Preguntas V√°lidas
- "¬øCu√°l es la situaci√≥n actual de inseguridad alimentaria en Colombia?"
- "¬øQu√© departamentos tienen mayor inseguridad alimentaria grave?"
- "¬øC√≥mo ha evolucionado la inseguridad alimentaria en los √∫ltimos a√±os?"
- "¬øCu√°les son las estad√≠sticas de inseguridad alimentaria por regiones?"
- "Compara la inseguridad alimentaria entre departamentos de la costa y del interior"

## Capacidades del Agente
- üîç Exploraci√≥n din√°mica de la base de datos
- üìä Consultas SQL flexibles y personalizadas  
- üìà An√°lisis estad√≠sticos avanzados
- üìã Visualizaciones autom√°ticas
- üåê Informaci√≥n contextual web complementaria

---
*El agente es flexible y puede adaptarse a cualquier pregunta sobre inseguridad alimentaria*
"""

    def get_database_info(self) -> str:
        """
        Obtiene informaci√≥n b√°sica sobre la base de datos disponible.

        Returns:
            Informaci√≥n sobre esquema y datos disponibles
        """
        try:
            # Usar la herramienta directamente
            return get_database_schema()
        except Exception as e:
            return f"Error obteniendo informaci√≥n de la base de datos: {str(e)}"

    def test_connection(self) -> Dict[str, Any]:
        """
        Prueba la conexi√≥n y configuraci√≥n del agente.

        Returns:
            Estado de los componentes del sistema
        """
        status = {
            "database": False,
            "model": False,
            "agent": False,
            "api_key": False,
            "web_search": False,
            "errors": [],
        }

        try:
            # Verificar base de datos
            db_path = str(self.settings.database.db_path)
            if os.path.exists(db_path):
                status["database"] = True
            else:
                status["errors"].append(f"Base de datos no encontrada: {db_path}")

            # Verificar API key
            api_key = self.settings.api.gemini_api_key
            if api_key and api_key != "TU_API_KEY_DE_GEMINI_AQUI":
                status["api_key"] = True
            else:
                status["errors"].append("GEMINI_API_KEY no configurada")

            # Verificar modelo
            if self.model:
                status["model"] = True
            else:
                status["errors"].append("Modelo LiteLLM no inicializado")

            # Verificar agente
            if self.agent:
                status["agent"] = True
            else:
                status["errors"].append("CodeAgent no inicializado")

            # Verificar b√∫squeda web
            if self.web_search_tool:
                status["web_search"] = True
            else:
                status["errors"].append("WebSearchTool no disponible")

        except Exception as e:
            status["errors"].append(f"Error en verificaci√≥n: {str(e)}")

        return status


# Instancia global del agente
try:
    food_security_agent = InseguridadAlimentariaAgent()
    print("‚úÖ Agente SmolAgents flexible inicializado correctamente")
    print("üîß El agente puede crear consultas SQL din√°micas para cualquier an√°lisis")
except Exception as e:
    print(f"‚ùå Error inicializando agente: {e}")
    food_security_agent = None
